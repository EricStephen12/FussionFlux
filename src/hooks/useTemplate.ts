import { useState, useCallback } from 'react';
import { ApolloService } from '../services/apollo';

interface Template {
  id: string;
  name: string;
  category: string;
  description: string;
  status: 'draft' | 'published';
  blocks: any[];
  isPreset?: boolean;
  thumbnail?: string;
  lastModified: string;
}

export const useTemplate = () => {
  const apolloService = new ApolloService();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const loadTemplate = useCallback(async (templateId: string): Promise<Template | null> => {
    setIsLoading(true);
    setError(null);
    try {
      const template = await apolloService.getTemplate(templateId);
      return template;
    } catch (err) {
      setError('Failed to load template');
      return null;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const saveTemplate = useCallback(async (template: Template, isDraft: boolean = true): Promise<Template | null> => {
    setIsLoading(true);
    setError(null);
    try {
      const savedTemplate = await apolloService.saveTemplate({
        ...template,
        status: isDraft ? 'draft' : 'published',
        lastModified: new Date().toISOString(),
      });
      return savedTemplate;
    } catch (err) {
      setError('Failed to save template');
      return null;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const duplicateTemplate = useCallback(async (templateId: string): Promise<Template | null> => {
    setIsLoading(true);
    setError(null);
    try {
      const template = await apolloService.getTemplate(templateId);
      if (!template) {
        throw new Error('Template not found');
      }

      const duplicatedTemplate = {
        ...template,
        id: '', // Will be generated by the backend
        name: `${template.name} (Copy)`,
        status: 'draft',
        lastModified: new Date().toISOString(),
      };

      const savedTemplate = await apolloService.saveTemplate(duplicatedTemplate);
      return savedTemplate;
    } catch (err) {
      setError('Failed to duplicate template');
      return null;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const deleteTemplate = useCallback(async (templateId: string): Promise<boolean> => {
    setIsLoading(true);
    setError(null);
    try {
      await apolloService.deleteTemplate(templateId);
      return true;
    } catch (err) {
      setError('Failed to delete template');
      return false;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const loadPresetTemplates = useCallback(async (): Promise<Template[]> => {
    setIsLoading(true);
    setError(null);
    try {
      const templates = await apolloService.getPresetTemplates();
      return templates;
    } catch (err) {
      setError('Failed to load preset templates');
      return [];
    } finally {
      setIsLoading(false);
    }
  }, []);

  const loadUserTemplates = useCallback(async (): Promise<Template[]> => {
    setIsLoading(true);
    setError(null);
    try {
      const templates = await apolloService.getUserTemplates();
      return templates;
    } catch (err) {
      setError('Failed to load user templates');
      return [];
    } finally {
      setIsLoading(false);
    }
  }, []);

  return {
    loadTemplate,
    saveTemplate,
    duplicateTemplate,
    deleteTemplate,
    loadPresetTemplates,
    loadUserTemplates,
    isLoading,
    error,
  };
}; 